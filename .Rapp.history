plot(y,y)
plot(x,y)
23*13
250 + 370 + 150 + 70
150 + 150 + 150
hexGridPoints <- read.csv("/Users/mariussomveille/Desktop/Hex_grid/isea3h6/isea3h6.csv")
hexGridPoints <- read.csv("/Users/mariussomveille/Desktop/Yale-MPIO/isea3h6/isea3h6.csv")
dim(hexGridPoints)
## Read the point coordinates (downloaded from internet)#
#
id=1#
for(i in 1:dim(hexGridPoints)[1]){#
	if(is.na(hexGridPoints[i,1]==T)){#
		hexGridPoints = hexGridPoints[-i,]#
		id=id+1#
		hexGridPoints[i,3] = id#
	}else{#
		hexGridPoints[i,3] = id#
	}#
}#
hexGridPoints[,4] <- 1:196834#
hexGridPoints <- hexGridPoints[which(hexGridPoints[,4] <= 189543),]#
hexGridPoints <- hexGridPoints[,1:3]#
colnames(hexGridPoints) <- c("Long", "Lat", "hexID")
library(devtools)
install.packages('devtools')
library(devtools)
install_github('r-barnes/dggridR', vignette=TRUE)
require(devtools)
install_github('andreacirilloac/updateR')
updateR(admin_password = "Cambridge2014")
library(updateR)
updateR(admin_password = "Cambridge2014")
library(dggridR)
hexgrid <- dgconstruct(projection="ISEA", topology="HEXAGON", res=7, metric=T)
hexgrid_center <- dgSEQNUM_to_GEO(hexgrid, 1:21872)
hexgrid_centroids <- cbind(hexgrid_center$lon_deg, hexgrid_center$lat_deg)
hexgrid_NorthAmerica <- dgcellstogrid(hexgrid, which(hexgrid_center$lon_deg <= -30 & hexgrid_center$lat_deg > 20), frame=F,wrapcells=TRUE)
plot(hexgrid_NorthAmerica)
hex_neighbours <- gTouches(hexgrid_NorthAmerica, byid=T)
library(igraph)
hex_neighbours <- gTouches(hexgrid_NorthAmerica, byid=T)
library(gdistance)
hex_neighbours <- gTouches(hexgrid_NorthAmerica, byid=T)
library(rgeos)
hex_neighbours <- gTouches(hexgrid_NorthAmerica, byid=T)
dim(hex_neighbours)
hex_neighbours[1:10,1:10]
sum(hex_neighbours)
sum(hex_neighbours[1,])
sum(hex_neighbours[10,])
sum(hex_neighbours[100,])
hex_neighbours_list <- list(apply(hex_neighbours, 1, function(x) which(x==TRUE)))
dim(hex_neighbours_list)
length(hex_neighbours_list)
hex_neighbours_list <- as.list(apply(hex_neighbours, 1, function(x) which(x==TRUE)))
length(hex_neighbours_list)
head(hex_neighbours_list <- as.list(apply(hex_neighbours, 1, function(x) which(x==TRUE))))
hex_neighbours_list[[1]]
hex_neighbours_list[[2]]
i=1
c(hexgrid_center$lon_deg[i], hexgrid_center$lat_deg[i])
c(hexgrid_center$lon_deg[hex_neighbours_list[i]], hexgrid_center$lat_deg[hex_neighbours_list[i]])
hex_neighbours_list[i]
hexgrid_center$lon_deg[hex_neighbours_list[i]]
hexgrid_center$lon_deg[hex_neighbours_list[[i]]]
cbind(hexgrid_center$lon_deg[hex_neighbours_list[[i]]], hexgrid_center$lat_deg[hex_neighbours_list[[i]]])
bearingRhumb(c(hexgrid_center$lon_deg[i], hexgrid_center$lat_deg[i]), cbind(hexgrid_center$lon_deg[hex_neighbours_list[[i]]], hexgrid_center$lat_deg[hex_neighbours_list[[i]]]))
library(geosphere)
bearingRhumb(c(hexgrid_center$lon_deg[i], hexgrid_center$lat_deg[i]), cbind(hexgrid_center$lon_deg[hex_neighbours_list[[i]]], hexgrid_center$lat_deg[hex_neighbours_list[[i]]]))
hex_bearings <- list()#
for(i in 1:hex_neighbours_list){#
	hex_bearings[[i]] <- bearingRhumb(c(hexgrid_center$lon_deg[i], hexgrid_center$lat_deg[i]), cbind(hexgrid_center$lon_deg[hex_neighbours_list[[i]]], hexgrid_center$lat_deg[hex_neighbours_list[[i]]]))#
}
hex_bearings <- list()#
for(i in 1:10){#
	hex_bearings[[i]] <- bearingRhumb(c(hexgrid_center$lon_deg[i], hexgrid_center$lat_deg[i]), cbind(hexgrid_center$lon_deg[hex_neighbours_list[[i]]], hexgrid_center$lat_deg[hex_neighbours_list[[i]]]))#
}
hex_bearings
?getdata
library(raster)
Temp_summer <- getdata("worldclim", var="tmin", res=5)
library(raster)
Temp_summer <- getData("worldclim", var="tmin", res=5)
dim(Temp_summer)
plot(Temp_summer[[1]])
plot(Temp_summer[[6]])
?rdist
8.71 / 5
(1+2.24+4)/3
28.71 / 10
Me = 10
M = 50
6.7*(Me^0.6452) / 6.7*(M^0.6452)
10/50
(Me^0.6452) / (M^0.6452)
(10^0.6452) / (50^0.6452)
(6.7*(Me^0.6452)) / (6.7*(M^0.6452))
body.sizes <- read.csv("~/Desktop/PhD/Chapter 4 – mechanistic model/Loading-data/Body_size_birds.csv")
dim(body.sizes)
hist(body.sizes)
hist(body.sizes[,1])
sample(body.sizes[,1], 1)
data.sibly <- read.csv("~/Desktop/PhD/Chapter 4 – mechanistic model/Loading-data/dataSibly.csv")
dim(data.sibly)
head(data.sibly)
plot(data.sibly$log10.mass, data.sibly$log10.productivity, pch=20)
plot(10^data.sibly$log10.mass, 10^data.sibly$log10.productivity, pch=20)
10^(log(8,base=10))
10^(log(10,base=10))
hist(10^data.sibly$log10.productivity)
productivity.nomass <- (10^data.sibly$log10.productivity) * (10^data.sibly$log10.mass)
hist(productivity.nomass)
plot(data.sibly$log10.mass, log(productivity.nomass,base=10), pch=20)
summary(lm(log(productivity.nomass,base=10) ~ data.sibly$log10.mass))
10^(0.367)
Me
Me = 0.367 + 0.6231*log(M, base=10)
Me
M
Me = 10^(0.367 + 0.6231*log(M, base=10))
Me
Me = 2.328 *(M^0.6231)
Me
2.328^0.6452
Me = ((2.328*(M^0.64))^0.64) / (M^0.64)
Me
M
Me = 1.725 * (M^0.64)
Me
((2.328*(M^0.64))^0.64)
1.725*(M^(2*0.64))
1.725*((M^0.64)^0.64)
0.64*0.64
0.6452 * 0.6231
0.4020 - 0.6452
Me = 1.725 * (M^(-0.2432))
Mé
Me
Me = ((2.328*(M^0.6231))^0.6452) / (M^0.6452)
Me
body.sizes <- read.csv("~/Desktop/PhD/Chapter 4 – mechanistic model/Loading-data/Body_size_birds.csv")
body.sizes <- read.csv("~/Desktop/PhD/Chapter 4 – mechanistic model/Loading-data/Body_size_birds.csv")[,1]
classt(body.sizes)
class(body.sizes)
body.sizes
body.sizes = body.sizes[-which(is.na(body.sizes)==T)]
length(body.sizes)
head(body.sizes)
write.csv("~/Desktop/PhD/Chapter 4 – mechanistic model/Loading-data/Body_size_birds2.csv")
write.csv(body.sizes, "~/Desktop/PhD/Chapter 4 – mechanistic model/Loading-data/Body_size_birds2.csv")
head(body.sizes)
6.45e-5
6.45e-5 - 0.000645
6.45e-5 - 0.00645
6.45*(10^-5)
(6.45*(10^-5)) / 0.0000645
2*(-77.232739 - -100.446938)
?lrtest
library(lmtest)
?lrtest
AIC_indep = (2*4- - (2*log(-100.446938))
AIC_indep = (2*4)- - (2*log(-100.446938))
AIC_indep = (2*4)- - (2*ln(-100.446938))
log(-1)
AIC_indep = (2*4)- - (2*l-100.446938)
AIC_indep = (2*4)- - (2*-100.446938)
AIC_indep
AIC_dep = (2*8)- - (2*-77.232739)
AIC_dep
2*(-77.232739 - -100.446938)
2*(-102 - -114)
AIC_indep = (2*4)- - (2*-114)
AIC_dep = (2*4)- - (2*-102)
AIC_indep
AIC_dep
AIC_indep = (2*4)- - (2*-101)
AIC_indep
AIC_indep = (2*4)- - (2*-79)
AIC_indep = (2*4)- - (2*-101)
AIC_dep = (2*4)- - (2*-79)
AIC_dep
pop = 1:1000#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), 10)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}
5/1000
10/1000
groupSize = 10#
pop = 1:1000#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}
prevalW = 0.1#
#
pop.behav = c(rep("W", length(pop)*prevalW), rep("E", (1-(length(pop)*prevalW))))
length(pop.behav)
pop.behav
rep("W", length(pop)*prevalW)
length(pop)*prevalW
length(pop)
groupSize = 10#
pop = 1:1000#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}
length(pop)
pop
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
#
res = vector()#
#
prevalW = 0.1#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (1-(popSize*prevalW))))
popSize*prevalW
rep("W", popSize*prevalW)
popSize-(popSize*prevalW)
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))
pop.behav
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}
pop.behav
c(res, length(which(pop.behav == "W")))
length(which(pop.behav == "W")) / popSize
prevals <- seq(0,1,0.1)#
#
for(k in 1:length(prevals)){}#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}
prevals <- seq(0,1,0.1)#
#
for(k in 1:length(prevals)){#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}
prevals <- seq(0,1,0.1)#
y <- vector#
for(k in 1:length(prevals)){#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}
y
)#
for(k in 1:length(prevals)){#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}
prevals <- seq(0,1,0.1)#
y <- vector()#
for(k in 1:length(prevals)){#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}
y
lambda=2#
yy = ((x/(1-x))^lambda) / (1+((x/(1-x))^lambda))#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="orange")
lambda=2#
yy = ((prevals/(1-prevals))^lambda) / (1+((prevals/(1-prevals))^lambda))#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="orange")
yy
lambda=2#
yy = ((prevals/(1-prevals))^lambda) / (1+((prevals/(1-prevals))^lambda))#
yy[length(yy)] <- 1#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="blue")
lambda=5#
yy = ((prevals/(1-prevals))^lambda) / (1+((prevals/(1-prevals))^lambda))#
yy[length(yy)] <- 1#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="blue")
lambda=3#
yy = ((prevals/(1-prevals))^lambda) / (1+((prevals/(1-prevals))^lambda))#
yy[length(yy)] <- 1#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="blue")
prevals <- seq(0,1,0.1)#
y <- vector()#
for(k in 1:length(prevals)){#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}#
lambda=3#
yy = ((prevals/(1-prevals))^lambda) / (1+((prevals/(1-prevals))^lambda))#
yy[length(yy)] <- 1#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="blue")
prevals <- seq(0,1,0.1)#
y <- vector()#
for(k in 1:length(prevals)){#
#
popSize = 1000#
groupSize = 10#
pop = 1:popSize#
spl <- list()#
i=1#
while(length(pop) > 0){#
	s = sample(1:length(pop), groupSize)#
	spl[[i]] <- pop[s]#
	pop = pop[-s]#
	i=i+1#
}#
prevalW = prevals[k]#
pop.behav = c(rep("W", popSize*prevalW), rep("E", (popSize-(popSize*prevalW))))#
#
for(i in 1:length(spl)){#
	if(length(which(pop.behav[spl[[i]]] == "W")) > 5){#
		pop.behav[spl[[i]]] <- rep("W", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) < 5){#
		pop.behav[spl[[i]]] <- rep("E", 10)#
	}#
	if(length(which(pop.behav[spl[[i]]] == "W")) == 5){#
		pop.behav[spl[[i]]] <- rep(sample(c("W","E"),1), 10)#
	} #
}#
y[k] = length(which(pop.behav == "W")) / popSize#
#
}#
lambda=2.5#
yy = ((prevals/(1-prevals))^lambda) / (1+((prevals/(1-prevals))^lambda))#
yy[length(yy)] <- 1#
#
plot(prevals, prevals, type='l')#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="blue")
plot(prevals, prevals, type='l', xlab="Prevalence of behaviour X", ylab="probability of adopting behaviour X")#
points(prevals, y, type='l', col="red")#
points(prevals, yy, type='l', col="blue")
setwd("/Users/mariussomveille/Desktop/Oxford/Project_Ben_Robin/Wytham-tits-information-flow")
load("data/movements_data.RData")
ls()
loggers_coords <- read.csv("data/Wytham_loggers_coordinates.csv")		# Data on the movement of birds across Wytham Woods
wyt <-readOGR("data", "perimeter poly with clearings_region")
library(rgdal)
wyt <-readOGR("data", "perimeter poly with clearings_region")
poly.sp<-SpatialPolygons(list(wyt@polygons[[1]]))#
poly.owin<-as(poly.sp,"owin")
library(spatstat)
poly.sp<-SpatialPolygons(list(wyt@polygons[[1]]))#
poly.owin<-as(poly.sp,"owin")
library(sp)
poly.owin<-as(poly.sp,"owin")
library(spdep)#
library(maptools)#
library(ncf)#
library(png)#
library(raster)#
library(sp)#
library(sna)#
library(mapplots)#
library(igraph)#
library(lattice)
wyt <-readOGR("data", "perimeter poly with clearings_region")#
poly.sp<-SpatialPolygons(list(wyt@polygons[[1]]))#
poly.owin<-as(poly.sp,"owin")
feeders.distances <- dist(loggers_coords[,2:3], upper=T, diag=T)
resultsModel_data <- read.csv("outputs/resultsModel_2patches.csv")
par(mfrow=c(2,3), mar=c(2.8,3.5,0.5,0.5), mgp=c(1.75,0.5,0))#
#
UP1 = 40#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab="", ylab=substitute(paste("Movement rate (", italic(m), ")")), cex.lab=1.3, cex=1.4)
par(mfrow=c(2,3), mar=c(2.8,3.5,0.5,0.5), mgp=c(1.75,0.5,0))#
#
# Initial conditions: 40 naive individuals in P1 and 60 naive individuals in P2; intermediate learning rate (alpha = 0.005)#
#
UP1 = 40  # Number of naive individuals in patch P1 at the start of the simulation#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab="", ylab=substitute(paste("Movement rate (", italic(m), ")")), cex.lab=1.3, cex=1.4)#
#
# Initial conditions: 40 naive individuals in P1 and 60 naive individuals in P2; fast learning rate (alpha = 0.01)#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab="", ylab="", cex.lab=1.3, cex=1.4)#
#
# Illustrate initial conditions#
plot(c(1,1), c(1,2), cex=c(6,4)*1.2, xlab="", ylab="", xlim=c(0.97,1.03), ylim=c(0.5,2.5), col=c("blue","orange"), axes=F)#
arrows(1, 1.31, 1, 1.79, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext(expression("P"[1]*": 40 inds"), side=3, line=-3.4, at=0.97, cex=0.8)#
mtext(expression("P"[2]*": 60 inds"), side=1, line=-2.9, at=0.97, cex=0.8)
UP1 = 49		# Number of naive individuals in patch P1 at the start of the simulation#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab=substitute(paste("Conformity strength (", italic(λ), ")")), ylab=substitute(paste("Movement rate (", italic(m), ")")), cex.lab=1.3, cex=1.4)#
# Initial conditions: 49 naive individuals in P1 and 51 naive individuals in P2; fast learning rate (alpha = 0.01)#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.005)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab=substitute(paste("Conformity strength (", italic(λ), ")")), ylab="", cex.lab=1.3, cex=1.4)#
#
# Illustrate initial conditions#
plot(c(1,1), c(1,2), cex=c(5.1,4.9)*1.2, xlab="", ylab="", xlim=c(0.97,1.03), ylim=c(0.5,2.5), col=c("blue","orange"), axes=F)#
arrows(1, 1.27, 1, 1.74, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext(expression("P"[1]*": 49 inds"), side=3, line=-3.4, at=0.97, cex=0.8)#
mtext(expression("P"[2]*": 51 inds"), side=1, line=-2.9, at=0.97, cex=0.8)
par(mfrow=c(2,1), mar=c(2.5,3,0.5,0.4), mgp=c(1.5,0.5,0))#
resultsModel <- read.csv("model/Old_model/resultsModel_2patches1.csv", header =F)#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,3], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,5], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.2, line=-0.75)
resultsModel <- read.csv("model/Old_model/resultsModel_2patches1.csv", header =F)
resultsModel <- read.csv("output/resultsModel_2patches1.csv", header =F)
resultsModel <- read.csv("outputs/resultsModel_2patches1.csv", header =F)
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,3], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,5], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.2, line=-0.75)
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,6], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.2, line=-0.75)
par(mfrow=c(2,1), mar=c(2.5,3,0.5,0.4), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("model/Old_model/resultsModel_2patches2.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,3], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,5], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.2, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,6], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.2, line=-0.25)
par(mfrow=c(2,1), mar=c(2.5,3,0.5,0.4), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_2patches2.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,3], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,5], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.2, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,6], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.2, line=-0.25)
par(mfrow=c(2,1), mar=c(2.5,3,0.5,0.4), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_2patches3.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,3], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,5], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.2, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,3]+resultsModel[1,5],resultsModel[1,2]+resultsModel[1,4]+resultsModel[1,6])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.2, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,6], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.2, line=-0.75)
resultsModel_data <- read.csv("outputs/resultsModel_3patches.csv")
plot(c(1,1,2.414214), c(1,2,1.5), cex=c(5,5.5,4.5)*1.2, xlab="", ylab="", xlim=c(0.5,3.5), ylim=c(0.5,2.5), col=c("black","orange","blue"), axes=F)#
arrows(1, 1.26, 1, 1.74, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.3, 1.1, 2.15, 1.4, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.32, 1.88, 2.15, 1.6, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext("1", side=1, line=-5.8, at=0.85, cex=0.75, col="dark grey")#
mtext("1.5", side=1, line=-3.9, at=1.8, cex=0.75, col="dark grey")#
mtext("1.5", side=1, line=-6.4, at=1.6, cex=0.75, col="dark grey")#
mtext(expression("P"[1]*": 55 inds"), side=3, line=-1.5, at=1, cex=0.75)#
mtext(expression("P"[2]*": 45 inds"), side=3, line=-4, at=2.45, cex=0.75)#
mtext(expression("P"[3]*": 50 inds"), side=1, line=-1, at=1, cex=0.75)#
#
UP1 = 55		 # Number of naive individuals in patch P1 at the start of the simulation#
UP2 = 45		 # Number of naive individuals in patch P2 at the start of the simulation#
distt = 1.5	 # Distance separating patch P2 from the two other patches#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab="", ylab=substitute(paste("Movement rate (", italic(m), ")")), cex.lab=1.3, cex=1.4)
par(mfrow=c(2,4), mar=c(2.8,3,0.5,0.1), mgp=c(1.75,0.5,0))#
# Initial conditions: 55 naive individuals in P1, 45 naive individuals in P2 and 50 naive individuals in P3; distance separating P2 from the two other patches is 1.5#
#
# Illustrate initial conditions#
plot(c(1,1,2.414214), c(1,2,1.5), cex=c(5,5.5,4.5)*1.2, xlab="", ylab="", xlim=c(0.5,3.5), ylim=c(0.5,2.5), col=c("black","orange","blue"), axes=F)#
arrows(1, 1.26, 1, 1.74, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.3, 1.1, 2.15, 1.4, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.32, 1.88, 2.15, 1.6, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext("1", side=1, line=-5.8, at=0.85, cex=0.75, col="dark grey")#
mtext("1.5", side=1, line=-3.9, at=1.8, cex=0.75, col="dark grey")#
mtext("1.5", side=1, line=-6.4, at=1.6, cex=0.75, col="dark grey")#
mtext(expression("P"[1]*": 55 inds"), side=3, line=-1.5, at=1, cex=0.75)#
mtext(expression("P"[2]*": 45 inds"), side=3, line=-4, at=2.45, cex=0.75)#
mtext(expression("P"[3]*": 50 inds"), side=1, line=-1, at=1, cex=0.75)#
#
UP1 = 55		 # Number of naive individuals in patch P1 at the start of the simulation#
UP2 = 45		 # Number of naive individuals in patch P2 at the start of the simulation#
distt = 1.5	 # Distance separating patch P2 from the two other patches#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab="", ylab=substitute(paste("Movement rate (", italic(m), ")")), cex.lab=1.3, cex=1.4)
UP1 = 55		 # Number of naive individuals in patch P1 at the start of the simulation#
UP2 = 45		 # Number of naive individuals in patch P2 at the start of the simulation#
distt = 5	 	 # Distance separating patch P2 from the two other patches#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab="", ylab="", cex.lab=1.3, cex=1.4)#
#
# Illustrate initial conditions#
plot(c(1,1,5.974937), c(1,2,1.5), cex=c(5,5.5,4.5)*1.2, xlab="", ylab="", xlim=c(0.44,7.14), ylim=c(0.5,2.5), col=c("black","orange","blue"), axes=F)#
arrows(1, 1.26, 1, 1.74, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.8, 1.06, 5.4, 1.4, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.85, 1.94, 5.4, 1.6, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext("1", side=1, line=-5.8, at=0.6, cex=0.75, col="dark grey")#
mtext("5", side=1, line=-3.9, at=3.5, cex=0.75, col="dark grey")#
mtext("5", side=1, line=-6.4, at=3.5, cex=0.75, col="dark grey")#
mtext(expression("P"[1]*": 55 inds"), side=3, line=-1.5, at=1, cex=0.75)#
mtext(expression("P"[2]*": 45 inds"), side=3, line=-4, at= 5.974937, cex=0.75)#
mtext(expression("P"[3]*": 50 inds"), side=1, line=-1, at=1, cex=0.75)
plot(c(1,1,2.414214), c(1,2,1.5), cex=c(5,4.5,5.5)*1.2, xlab="", ylab="", xlim=c(0.5,3.5), ylim=c(0.5,2.5), col=c("black","orange","blue"), axes=F)#
arrows(1, 1.26, 1, 1.77, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.3, 1.1, 2.08, 1.4, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.28, 1.88, 2.08, 1.6, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext("1", side=1, line=-5.8, at=0.85, cex=0.75, col="dark grey")#
mtext("1.5", side=1, line=-3.9, at=1.8, cex=0.75, col="dark grey")#
mtext("1.5", side=1, line=-6.4, at=1.55, cex=0.75, col="dark grey")#
mtext(expression("P"[1]*": 45 inds"), side=3, line=-1.5, at=1, cex=0.75)#
mtext(expression("P"[2]*": 55 inds"), side=3, line=-4, at=2.45, cex=0.75)#
mtext(expression("P"[3]*": 50 inds"), side=1, line=-1, at=1, cex=0.75)#
#
UP1 = 45	# Number of naive individuals in patch P1 at the start of the simulation#
UP2 = 55	# Number of naive individuals in patch P2 at the start of the simulation#
distt = 1.5	# Distance separating patch P2 from the two other patches#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab=substitute(paste("Conformity strength (", italic(λ), ")")), ylab=substitute(paste("Movement rate (", italic(m), ")")), cex.lab=1.3, cex=1.4)
UP1 = 45	# Number of naive individuals in patch P1 at the start of the simulation#
UP2 = 55	# Number of naive individuals in patch P2 at the start of the simulation#
distt = 5	# Distance separating patch P2 from the two other patches#
#
x = resultsModel_data$Beta[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
y = resultsModel_data$Lambda[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)]#
z = rep(0, length(x))#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.33 & resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 1#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.01)] <- 2#
z[which(resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] >= 0.1)] <- 3#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] > 0.66 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 4#
z[which(resultsModel_data$Total_prop_Ls[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.33 & resultsModel_data$Var[which(resultsModel_data$Patch1_Us == UP1 & resultsModel_data$Patch2_Us == UP2 & resultsModel_data$Distance == distt & resultsModel_data$Alpha == 0.01)] < 0.01)] <- 5#
xx <- seq(1.0, 5, 0.2)#
yy <- seq(0, 0.0100, 0.0005)#
z = z[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = y[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
x = x[which(match(as.character(x), as.character(xx), nomatch=0) > 0)]#
y = c(rep(0,21), y)#
x = c(xx, x)#
z = c(rep(3,21), z)#
rbPal <- colorRampPalette(c("grey", "green", "dark green", "orange", "blue"))#
datcol <- rbPal(5)[as.numeric(cut(z, breaks=c(0.9,1.9,2.9,3.9,4.9,5.9)))]#
plot(x, y, col=datcol, pch=15, ylim=c(0,0.01), xlim=c(1,5), xlab=substitute(paste("Conformity strength (", italic(λ), ")")), ylab="", cex.lab=1.3, cex=1.4)#
#
# Illustrate initial conditions#
plot(c(1,1,5.974937), c(1,2,1.5), cex=c(5,4.5,5.5)*1.2, xlab="", ylab="", xlim=c(0.44,7.14), ylim=c(0.5,2.5), col=c("black","orange","blue"), axes=F)#
arrows(1, 1.26, 1, 1.77, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.8, 1.06, 5.2, 1.4, length=0.05, col="dark grey", lwd=1.3, code=3)#
arrows(1.77, 1.94, 5.2, 1.6, length=0.05, col="dark grey", lwd=1.3, code=3)#
mtext("1", side=1, line=-5.8, at=0.6, cex=0.75, col="dark grey")#
mtext("5", side=1, line=-3.9, at=3.5, cex=0.75, col="dark grey")#
mtext("5", side=1, line=-6.4, at=3.5, cex=0.75, col="dark grey")#
mtext(expression("P"[1]*": 45 inds"), side=3, line=-1.5, at=1, cex=0.75)#
mtext(expression("P"[2]*": 55 inds"), side=3, line=-4, at= 5.974937, cex=0.75)#
mtext(expression("P"[3]*": 50 inds"), side=1, line=-1, at=1, cex=0.75)
par(mfrow=c(3,1), mar=c(2.8,2.8,1,0.3), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_3patches1.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,7], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,2], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,5], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,8], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 3#
plot(1:151, resultsModel[,3], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,6], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,9], col="blue", type="l", lwd=1.5)#
mtext(expressio
par(mfrow=c(3,1), mar=c(2.8,2.8,1,0.3), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_3patches1.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,7], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,2], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,5], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,8], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 3#
plot(1:151, resultsModel[,3], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,6], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,9], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[3]*""), side=3, at=75, cex=1.15, line=-0.75)
par(mfrow=c(3,1), mar=c(2.8,2.8,1,0.3), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_3patches2.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,7], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,2], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,5], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,8], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.15, line=-0.25)#
#
# Patch 3#
plot(1:151, resultsModel[,3], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,6], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,9], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[3]*""), side=3, at=75, cex=1.15, line=-0.75)
par(mfrow=c(3,1), mar=c(2.8,2.8,1,0.3), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_3patches3.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,7], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,2], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,5], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,8], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.15, line=-0.25)#
#
# Patch 3#
plot(1:151, resultsModel[,3], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,6], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,9], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[3]*""), side=3, at=75, cex=1.15, line=-0.75)
par(mfrow=c(3,1), mar=c(2.8,2.8,1,0.3), mgp=c(1.5,0.5,0))#
#
resultsModel <- read.csv("outputs/resultsModel_3patches4.csv", header =F)#
#
# Patch 1#
plot(1:151, resultsModel[,1], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,4], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,7], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[1]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 2#
plot(1:151, resultsModel[,2], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,5], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,8], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[2]*""), side=3, at=75, cex=1.15, line=-0.75)#
#
# Patch 3#
plot(1:151, resultsModel[,3], col="black", type="l", ylim=c(0,max(resultsModel[1,1]+resultsModel[1,4]+resultsModel[1,7], resultsModel[1,2]+resultsModel[1,5]+resultsModel[1,8], resultsModel[1,3]+resultsModel[1,6]+resultsModel[1,9])), xlab="Time (days)", ylab="Number of individuals", axes=F, cex.lab=1.3, lwd=1.5)#
axis(side=1)#
axis(side=2)#
points(1:151, resultsModel[,6], col="orange", type="l", lwd=1.5)#
points(1:151, resultsModel[,9], col="blue", type="l", lwd=1.5)#
mtext(expression("P"[3]*""), side=3, at=75, cex=1.15, line=-0.75)
resultsModel_data <- read.csv("outputs/resultsModel_wytham.csv")
resultsModel_data <- read.csv("outputs/resultsModel_wytham.csv")
# Plot the map after 20 days#
time.point <- 20#
model_res <- cbind(as.matrix(resultsModel)[time.point,1:65], as.matrix(resultsModel)[time.point,66:130], as.matrix(resultsModel)[time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the map after 150 days#
final.time.point <- 150#
model_res <- cbind(as.matrix(resultsModel)[final.time.point,1:65], as.matrix(resultsModel)[final.time.point,66:130], as.matrix(resultsModel)[final.time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}
par(mfrow=c(3,3), mar=c(2.5,2.75,0.3,0.3), mgp=c(1.5,0.5,0))#
# Example of model run resulting in a mixture of solutions in every patches (lambda=1 – no conformity bias; m=0.003)#
#
resultsModel <- read.csv("model/Old_model/resultsModel_wytham1.csv", header=F)#
resultsModel <- abs(resultsModel)#
#
# Plot the map after 20 days#
time.point <- 20#
model_res <- cbind(as.matrix(resultsModel)[time.point,1:65], as.matrix(resultsModel)[time.point,66:130], as.matrix(resultsModel)[time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the map after 150 days#
final.time.point <- 150#
model_res <- cbind(as.matrix(resultsModel)[final.time.point,1:65], as.matrix(resultsModel)[final.time.point,66:130], as.matrix(resultsModel)[final.time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}
par(mfrow=c(3,3), mar=c(2.5,2.75,0.3,0.3), mgp=c(1.5,0.5,0))#
# Example of model run resulting in a mixture of solutions in every patches (lambda=1 – no conformity bias; m=0.003)#
#
resultsModel <- read.csv("outputs/resultsModel_wytham1.csv", header=F)#
resultsModel <- abs(resultsModel)#
#
# Plot the map after 20 days#
time.point <- 20#
model_res <- cbind(as.matrix(resultsModel)[time.point,1:65], as.matrix(resultsModel)[time.point,66:130], as.matrix(resultsModel)[time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the map after 150 days#
final.time.point <- 150#
model_res <- cbind(as.matrix(resultsModel)[final.time.point,1:65], as.matrix(resultsModel)[final.time.point,66:130], as.matrix(resultsModel)[final.time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}
# Plot the evolution of the proportion of solvers with solution s1 among all solvers over simulation time#
model_res <- list()#
prop <- matrix(nrow=final.time.point, ncol=65)#
propL <- matrix(nrow=final.time.point, ncol=65)#
for(i in 1:final.time.point){#
	model_res[[i]] <- cbind(as.matrix(resultsModel)[i,1:65], as.matrix(resultsModel)[i,66:130], as.matrix(resultsModel)[i,131:195])#
	prop[i,] <- apply(model_res[[i]], 1, function(x) (x[2]+x[3])/sum(x))#
	propL[i,] <- apply(model_res[[i]], 1, function(x) x[2]/(x[2]+x[3]))#
}#
plot(1:final.time.point, propL[,1], col="dark grey", pch=3, xlab="", ylab=expression("Prevalence of solution s"[1]*""), ylim=c(0,1), type="l", axes=F, cex.lab=1.4, lwd=1.2)#
for(i in 2:65){#
	points(1:final.time.point, propL[,i], col="dark grey", pch=3, ylim=c(0,1), type="l", lwd=1.2)#
}#
axis(side=1)#
axis(side=2)
resultsModel <- read.csv("outputs/resultsModel_wytham2.csv", header=F)#
resultsModel <- abs(resultsModel)#
#
# Plot the map after 20 days#
time.point <- 20#
model_res <- cbind(as.matrix(resultsModel)[time.point,1:65], as.matrix(resultsModel)[time.point,66:130], as.matrix(resultsModel)[time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the map after 150 days#
final.time.point <- 150#
model_res <- cbind(as.matrix(resultsModel)[final.time.point,1:65], as.matrix(resultsModel)[final.time.point,66:130], as.matrix(resultsModel)[final.time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the evolution of the proportion of solvers with solution s1 among all solvers over simulation time#
model_res <- list()#
prop <- matrix(nrow=final.time.point, ncol=65)#
propL <- matrix(nrow=final.time.point, ncol=65)#
for(i in 1:final.time.point){#
	model_res[[i]] <- cbind(as.matrix(resultsModel)[i,1:65], as.matrix(resultsModel)[i,66:130], as.matrix(resultsModel)[i,131:195])#
	prop[i,] <- apply(model_res[[i]], 1, function(x) (x[2]+x[3])/sum(x))#
	propL[i,] <- apply(model_res[[i]], 1, function(x) x[2]/(x[2]+x[3]))#
}#
plot(1:final.time.point, propL[,1], col="dark grey", pch=3, xlab="", ylab=expression("Prevalence of solution s"[1]*""), ylim=c(0,1), type="l", axes=F, cex.lab=1.4, lwd=1.2)#
for(i in 2:65){#
	points(1:final.time.point, propL[,i], col="dark grey", pch=3, ylim=c(0,1), type="l", lwd=1.2)#
}#
axis(side=1)#
axis(side=2)
resultsModel <- read.csv("model/Old_model/resultsModel_wytham3.csv", header=F)#
resultsModel <- abs(resultsModel)#
#
# Plot the map after 20 days#
time.point <- 20#
model_res <- cbind(as.matrix(resultsModel)[time.point,1:65], as.matrix(resultsModel)[time.point,66:130], as.matrix(resultsModel)[time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the map after 150 days#
final.time.point <- 150#
model_res <- cbind(as.matrix(resultsModel)[final.time.point,1:65], as.matrix(resultsModel)[final.time.point,66:130], as.matrix(resultsModel)[final.time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the evolution of the proportion of solvers with solution s1 among all solvers over simulation time#
model_res <- list()#
prop <- matrix(nrow=final.time.point, ncol=65)#
propL <- matrix(nrow=final.time.point, ncol=65)#
for(i in 1:final.time.point){#
	model_res[[i]] <- cbind(as.matrix(resultsModel)[i,1:65], as.matrix(resultsModel)[i,66:130], as.matrix(resultsModel)[i,131:195])#
	prop[i,] <- apply(model_res[[i]], 1, function(x) (x[2]+x[3])/sum(x))#
	propL[i,] <- apply(model_res[[i]], 1, function(x) x[2]/(x[2]+x[3]))#
}#
plot(1:final.time.point, propL[,1], col="dark grey", pch=3, xlab="Time (days)", ylab=expression("Prevalence of solution s"[1]*""), ylim=c(0,1), type="l", axes=F, cex.lab=1.4, lwd=1.2)#
for(i in 2:65){#
	points(1:final.time.point, propL[,i], col="dark grey", pch=3, ylim=c(0,1), type="l", lwd=1.2)#
}#
axis(side=1)#
axis(side=2)
resultsModel <- read.csv("outputs/resultsModel_wytham3.csv", header=F)#
resultsModel <- abs(resultsModel)#
#
# Plot the map after 20 days#
time.point <- 20#
model_res <- cbind(as.matrix(resultsModel)[time.point,1:65], as.matrix(resultsModel)[time.point,66:130], as.matrix(resultsModel)[time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the map after 150 days#
final.time.point <- 150#
model_res <- cbind(as.matrix(resultsModel)[final.time.point,1:65], as.matrix(resultsModel)[final.time.point,66:130], as.matrix(resultsModel)[final.time.point,131:195])#
model_res_list <- as.list(as.data.frame(t(model_res)))#
plot(poly.owin, main="")#
for(i in 1:60){#
	add.pie(z=model_res_list[[i]], x=loggers_coords[i,"x"], y=loggers_coords[i,"y"], labels="", radius=loggers[i,5]*2, col=c("grey", "orange", "blue"))#
}#
#
# Plot the evolution of the proportion of solvers with solution s1 among all solvers over simulation time#
model_res <- list()#
prop <- matrix(nrow=final.time.point, ncol=65)#
propL <- matrix(nrow=final.time.point, ncol=65)#
for(i in 1:final.time.point){#
	model_res[[i]] <- cbind(as.matrix(resultsModel)[i,1:65], as.matrix(resultsModel)[i,66:130], as.matrix(resultsModel)[i,131:195])#
	prop[i,] <- apply(model_res[[i]], 1, function(x) (x[2]+x[3])/sum(x))#
	propL[i,] <- apply(model_res[[i]], 1, function(x) x[2]/(x[2]+x[3]))#
}#
plot(1:final.time.point, propL[,1], col="dark grey", pch=3, xlab="Time (days)", ylab=expression("Prevalence of solution s"[1]*""), ylim=c(0,1), type="l", axes=F, cex.lab=1.4, lwd=1.2)#
for(i in 2:65){#
	points(1:final.time.point, propL[,i], col="dark grey", pch=3, ylim=c(0,1), type="l", lwd=1.2)#
}#
axis(side=1)#
axis(side=2)
par(mfrow=c(3,3), mar=c(2.5,2.5,2.5,0.1), mgp=c(1.5,0.5,0))#
#
## Summary statistics (total prevalence of solution s1, and variance in the prevalence of solution s1) outputed by model runs with initial conditions randomized #
#
# With no conformity (lambda = 1)#
resultsModel_random_forestDist_data_conf1 <- read.csv("outputs/resultsModel_wytham_sumstats_random_conformity1.csv", header=F)#
diff_centr_conf1 <- resultsModel_random_forestDist_data_conf1[,6] - resultsModel_random_forestDist_data_conf1[,5]#
diff_pools_conf1 <- resultsModel_random_forestDist_data_conf1[,3] - resultsModel_random_forestDist_data_conf1[,4]#
length(which(resultsModel_random_forestDist_data_conf1[,1] > 0.01))/100#
length(which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] < 0.33))/100#
length(which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.66))/100#
length(which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.33 & resultsModel_random_forestDist_data_conf1[,2] < 0.66))/100#
#
# With weak conformity (lambda = 1.2)#
resultsModel_random_forestDist_data_conf1.2 <- read.csv("outputs/resultsModel_wytham_sumstats_random_conformity1.2.csv", header=F)#
diff_centr_conf1.2 <- resultsModel_random_forestDist_data_conf1.2[,6] - resultsModel_random_forestDist_data_conf1.2[,5]#
diff_pools_conf1.2 <- resultsModel_random_forestDist_data_conf1.2[,3] - resultsModel_random_forestDist_data_conf1.2[,4]#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] > 0.01))/100#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.33))/100#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.66))/100#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.33 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.66))/100#
#
# With strong conformity (lambda = 4)#
resultsModel_random_forestDist_data_conf4 <- read.csv("outputs/resultsModel_wytham_sumstats_random_conformity4.csv", header=F)#
diff_centr_conf4 <- resultsModel_random_forestDist_data_conf4[,6] - resultsModel_random_forestDist_data_conf4[,5]#
diff_pools_conf4 <- resultsModel_random_forestDist_data_conf4[,3] - resultsModel_random_forestDist_data_conf4[,4]#
length(which(resultsModel_random_forestDist_data_conf4[,1] > 0.01))/100#
length(which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] < 0.33))/100#
length(which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.66))/100#
length(which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.33 & resultsModel_random_forestDist_data_conf4[,2] < 0.66))/100
par(mfrow=c(3,3), mar=c(2.5,2.5,2.5,0.1), mgp=c(1.5,0.5,0))#
#
## Summary statistics (total prevalence of solution s1, and variance in the prevalence of solution s1) outputed by model runs with initial conditions randomized #
#
# With no conformity (lambda = 1)#
resultsModel_random_forestDist_data_conf1 <- read.csv("outputs/resultsModel_wytham_sumstats_random_conformity1.csv", header=F)#
diff_centr_conf1 <- resultsModel_random_forestDist_data_conf1[,6] - resultsModel_random_forestDist_data_conf1[,5]#
diff_pools_conf1 <- resultsModel_random_forestDist_data_conf1[,3] - resultsModel_random_forestDist_data_conf1[,4]#
length(which(resultsModel_random_forestDist_data_conf1[,1] > 0.01))/100#
length(which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] < 0.33))/100#
length(which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.66))/100#
length(which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.33 & resultsModel_random_forestDist_data_conf1[,2] < 0.66))/100#
#
plot(resultsModel_random_forestDist_data_conf1[,2], resultsModel_random_forestDist_data_conf1[,1], pch=20, xlim=c(0,1), ylim=c(0,0.12), xlab="", ylab=expression("Variance in prevalence of solution s"[1]*""), axes=F, col="green", cex.lab=1.1, main=substitute(paste("No conformity (", italic(λ), " = 1)")))#
points(resultsModel_random_forestDist_data_conf1[,2][which(resultsModel_random_forestDist_data_conf1[,1] > 0.1)], resultsModel_random_forestDist_data_conf1[,1][which(resultsModel_random_forestDist_data_conf1[,1] > 0.1)], pch=20, col="dark green")#
points(resultsModel_random_forestDist_data_conf1[,2][which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] < 0.33)], resultsModel_random_forestDist_data_conf1[,1][which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] < 0.33)], pch=20, col="blue")#
points(resultsModel_random_forestDist_data_conf1[,2][which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.33)], resultsModel_random_forestDist_data_conf1[,1][which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.33)], pch=20, col="orange")#
points(resultsModel_random_forestDist_data_conf1[,2][which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.33 & resultsModel_random_forestDist_data_conf1[,2] < 0.66)], resultsModel_random_forestDist_data_conf1[,1][which(resultsModel_random_forestDist_data_conf1[,1] < 0.01 & resultsModel_random_forestDist_data_conf1[,2] > 0.33 & resultsModel_random_forestDist_data_conf1[,2] < 0.66)], pch=20, col="dark grey")#
abline(h=0.01)#
axis(side=1)#
axis(side=2)#
legend("topright", inset=.02, box.col="black", c("Mixture of solutions",expression("Solution s"[1]*" dominates"), expression("Solution s"[2]*" dominates"), "Weak local traditions", "Strong local traditions"), col=c("dark grey", "orange", "blue", "green", "dark green"), pch=20)#
# With weak conformity (lambda = 1.2)#
resultsModel_random_forestDist_data_conf1.2 <- read.csv("outputs/resultsModel_wytham_sumstats_random_conformity1.2.csv", header=F)#
diff_centr_conf1.2 <- resultsModel_random_forestDist_data_conf1.2[,6] - resultsModel_random_forestDist_data_conf1.2[,5]#
diff_pools_conf1.2 <- resultsModel_random_forestDist_data_conf1.2[,3] - resultsModel_random_forestDist_data_conf1.2[,4]#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] > 0.01))/100#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.33))/100#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.66))/100#
length(which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.33 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.66))/100#
#
plot(resultsModel_random_forestDist_data_conf1.2[,2], resultsModel_random_forestDist_data_conf1.2[,1], pch=20, xlim=c(0,1), ylim=c(0,0.15), xlab="", ylab="", axes=F, col="green", cex.lab=1.1, main=substitute(paste("Weak conformity (", italic(λ), " = 1.2)")))#
points(resultsModel_random_forestDist_data_conf1.2[,2][which(resultsModel_random_forestDist_data_conf1.2[,1] > 0.1)], resultsModel_random_forestDist_data_conf1.2[,1][which(resultsModel_random_forestDist_data_conf1.2[,1] > 0.1)], pch=20, col="dark green")#
points(resultsModel_random_forestDist_data_conf1.2[,2][which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.33)], resultsModel_random_forestDist_data_conf1.2[,1][which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.33)], pch=20, col="blue")#
points(resultsModel_random_forestDist_data_conf1.2[,2][which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.33)], resultsModel_random_forestDist_data_conf1.2[,1][which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.33)], pch=20, col="orange")#
points(resultsModel_random_forestDist_data_conf1.2[,2][which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.33 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.66)], resultsModel_random_forestDist_data_conf1.2[,1][which(resultsModel_random_forestDist_data_conf1.2[,1] < 0.01 & resultsModel_random_forestDist_data_conf1.2[,2] > 0.33 & resultsModel_random_forestDist_data_conf1.2[,2] < 0.66)], pch=20, col="dark grey")#
abline(h=0.01)#
axis(side=1)#
axis(side=2)#
# With strong conformity (lambda = 4)#
resultsModel_random_forestDist_data_conf4 <- read.csv("outputs/resultsModel_wytham_sumstats_random_conformity4.csv", header=F)#
diff_centr_conf4 <- resultsModel_random_forestDist_data_conf4[,6] - resultsModel_random_forestDist_data_conf4[,5]#
diff_pools_conf4 <- resultsModel_random_forestDist_data_conf4[,3] - resultsModel_random_forestDist_data_conf4[,4]#
length(which(resultsModel_random_forestDist_data_conf4[,1] > 0.01))/100#
length(which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] < 0.33))/100#
length(which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.66))/100#
length(which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.33 & resultsModel_random_forestDist_data_conf4[,2] < 0.66))/100#
#
plot(resultsModel_random_forestDist_data_conf4[,2], resultsModel_random_forestDist_data_conf4[,1], pch=20, xlim=c(0,1), ylim=c(0,0.2), xlab="", ylab="", axes=F, col="green", cex.lab=1.1, main=substitute(paste("Strong conformity (", italic(λ), " = 4)")))#
points(resultsModel_random_forestDist_data_conf4[,2][which(resultsModel_random_forestDist_data_conf4[,1] > 0.1)], resultsModel_random_forestDist_data_conf4[,1][which(resultsModel_random_forestDist_data_conf4[,1] > 0.1)], pch=20, col="dark green")#
points(resultsModel_random_forestDist_data_conf4[,2][which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] < 0.33)], resultsModel_random_forestDist_data_conf4[,1][which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] < 0.33)], pch=20, col="blue")#
points(resultsModel_random_forestDist_data_conf4[,2][which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.33)], resultsModel_random_forestDist_data_conf4[,1][which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.33)], pch=20, col="orange")#
points(resultsModel_random_forestDist_data_conf4[,2][which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.33 & resultsModel_random_forestDist_data_conf4[,2] < 0.66)], resultsModel_random_forestDist_data_conf4[,1][which(resultsModel_random_forestDist_data_conf4[,1] < 0.01 & resultsModel_random_forestDist_data_conf4[,2] > 0.33 & resultsModel_random_forestDist_data_conf4[,2] < 0.66)], pch=20, col="dark grey")#
abline(h=0.01)#
axis(side=1)#
axis(side=2)
